//
// Eero conversion of example source code provided by Apple.
//
// This file based on file:
//     SeismicXML/ObjC/RootViewController.m
//
// Please see it for Apple license details.
//
// Abstract: View controller for displaying the earthquake list.
//
#import "LegacyMacros.h"
#import "RootViewController.h"
#import 'Earthquake.h'

using prefix UI

implementation RootViewController

  synthesize earthquakeList

#pragma mark -

  //------------------------------------------------------------------------------------------------
  dealloc
    earthquakeList release
    dateFormatter release
    super dealloc


  //------------------------------------------------------------------------------------------------
  viewDidLoad
    super viewDidLoad
    
    self.earthquakeList = []
    
    // The table row height is not the standard value. Since all the rows have the same height,
    // it is more efficient to set this property on the table, rather than using the delegate
    // method -tableView:heightForRowAtIndexPath:
    //
    self.tableView.rowHeight = 48.0
    
    // KVO: listen for changes to our earthquake data source for table view updates
    self addObserver: self,
          forKeyPath: 'earthquakeList',
             options: (KeyValueObservingOptions)0,
             context: NULL


  //------------------------------------------------------------------------------------------------
  viewDidUnload
    super viewDidUnload
    self.earthquakeList = nil
    self removeObserver: self, forKeyPath: 'earthquakeList'


  //------------------------------------------------------------------------------------------------
  // On-demand initializer for read-only property.
  //
  dateFormatter, return DateFormatter
    if dateFormatter == nil
      dateFormatter = DateFormatter new
      dateFormatter setTimeZone: (TimeZone timeZoneForSecondsFromGMT: 0)
      dateFormatter setDateStyle: DateFormatterMediumStyle
      dateFormatter setTimeStyle: DateFormatterMediumStyle

    return dateFormatter


  //------------------------------------------------------------------------------------------------
  // Based on the magnitude of the earthquake, return an image indicating its seismic strength.
  //
  imageForMagnitude: CGFloat, return Image

    if magnitude >= 5.0
      return Image imageNamed: '5.0.png'

    if magnitude >= 4.0
      return Image imageNamed: '4.0.png'

    if magnitude >= 3.0
      return Image imageNamed: '3.0.png'

    if magnitude >= 2.0
      return Image imageNamed: '2.0.png'

    return nil

#pragma mark -
#pragma mark KVO support


  //------------------------------------------------------------------------------------------------
  insertEarthquakes: Array

    // this will allow us as an observer to notified (see observeValueForKeyPath)
    // so we can update our UITableView
    //
    self willChangeValueForKey: 'earthquakeList'
    self.earthquakeList addObjectsFromArray: earthquakes
    self didChangeValueForKey: 'earthquakeList'


  //------------------------------------------------------------------------------------------------
  // listen for changes to the earthquake list coming from our app delegate.
  //
  observeValueForKeyPath: String,
                ofObject: id,
                  change: Dictionary,
                 context: void *

    self.tableView reloadData

#pragma mark -
#pragma mark UITableViewDelegate


  //------------------------------------------------------------------------------------------------
  // The number of rows is equal to the number of earthquakes in the array.
  //
  tableView: TableView, numberOfRowsInSection: Integer, return Integer
    return earthquakeList count


  //------------------------------------------------------------------------------------------------
  // The cell uses a custom layout, but otherwise has standard behavior for UITableViewCell.
  // In these cases, it's preferable to modify the view hierarchy of the cell's content view, rather
  // than subclassing. Instead, view "tags" are used to identify specific controls, such as labels,
  // image views, etc.
  //
  tableView: TableView, cellForRowAtIndexPath: IndexPath, return TableViewCell

    using prefix CG

    // Each subview in the cell will be identified by a unique tag.
    //
    static const UInteger kLocationLabelTag  = 2
    static const UInteger kDateLabelTag      = 3
    static const UInteger kMagnitudeLabelTag = 4
    static const UInteger kMagnitudeImageTag = 5
    
    // Declare references to the subviews which will display the earthquake data.
    //
    Label locationLabel = nil
    Label dateLabel = nil
    Label magnitudeLabel = nil
    ImageView magnitudeImage = nil
    
    static const kEarthquakeCellID := 'EarthquakeCellID'
    TableViewCell cell = view dequeueReusableCellWithIdentifier: kEarthquakeCellID

    if cell == nil
      // No reusable cell was available, so we create a new cell and configure its subviews.
      cell = TableViewCell alloc initWithStyle: UITableViewCellStyleDefault,
                               reuseIdentifier: kEarthquakeCellID  autorelease

      locationLabel = Label alloc initWithFrame: RectMake(10, 3, 190, 20) autorelease
      locationLabel.tag = kLocationLabelTag
      locationLabel.font = Font boldSystemFontOfSize: 14
      cell.contentView addSubview: locationLabel

      dateLabel = Label alloc initWithFrame: RectMake(10, 28, 170, 14) autorelease
      dateLabel.tag = kDateLabelTag
      dateLabel.font = Font systemFontOfSize: 10
      cell.contentView addSubview: dateLabel

      magnitudeLabel = Label alloc initWithFrame: RectMake(277, 9, 170, 29) autorelease
      magnitudeLabel.tag = kMagnitudeLabelTag
      magnitudeLabel.font = Font boldSystemFontOfSize: 24
      magnitudeLabel.autoresizingMask = ViewAutoresizingFlexibleLeftMargin
      cell.contentView addSubview: magnitudeLabel

      magnitudeImage = ImageView alloc initWithImage: (Image imageNamed: '5.0.png') autorelease
      imageFrame := magnitudeImage.frame
      imageFrame.origin = PointMake(180, 2)
      magnitudeImage.frame = imageFrame
      magnitudeImage.tag = kMagnitudeImageTag
      magnitudeImage.autoresizingMask = ViewAutoresizingFlexibleLeftMargin
      cell.contentView addSubview: magnitudeImage

    else
      // A reusable cell was available, so we just need to get a reference to the subviews
      // using their tags.
      //
      locationLabel = (Label)(cell.contentView viewWithTag: kLocationLabelTag)
      dateLabel = (Label)(cell.contentView viewWithTag: kDateLabelTag)
      magnitudeLabel = (Label)(cell.contentView viewWithTag: kMagnitudeLabelTag)
      magnitudeImage = (ImageView)(cell.contentView viewWithTag: kMagnitudeImageTag)

    // Get the specific earthquake for this row.
    Earthquake earthquake = earthquakeList[path.row]
    
    // Set the relevant data for each subview in the cell.
    locationLabel.text = earthquake.location
    dateLabel.text = self.dateFormatter stringFromDate: earthquake.date
    magnitudeLabel.text = String stringWithFormat: '%.1f', earthquake.magnitude
    magnitudeImage.image = self imageForMagnitude: earthquake.magnitude

    return cell


  //------------------------------------------------------------------------------------------------
  // When the user taps a row in the table, display the USGS web page that displays details of the
  // earthquake they selected.
  //
  tableView: TableView, didSelectRowAtIndexPath: IndexPath

    sheet := ActionSheet alloc initWithTitle: LocalizedString('External App Sheet Title',
                                                              'Title for sheet displayed with options for displaying Earthquake data in other applications'),
                                    delegate: self,
                           cancelButtonTitle: LocalizedString('Cancel', 'Cancel'),
                      destructiveButtonTitle: nil,
                           otherButtonTitles: LocalizedString('Show USGS Site in Safari', 'Show USGS Site in Safari'),
                                              LocalizedString('Show Location in Maps', 'Show Location in Maps'),
                                              nil
    sheet showInView: self.view
    sheet release


  //------------------------------------------------------------------------------------------------
  // Called when the user selects an option in the sheet. The sheet will automatically be dismissed.
  //
  actionSheet: ActionSheet, willDismissWithButtonIndex: Integer

    selectedIndexPath := self.tableView indexPathForSelectedRow
    Earthquake earthquake = earthquakeList[selectedIndexPath.row]

    switch index
      case 0:
        webLink := earthquake USGSWebLink
        Application.sharedApplication openURL: webLink
      case 1:
        String mapsQuery = String stringWithFormat:'http://maps.google.com/maps?z=6&t=h&ll=%f,%f',
                                                    earthquake.latitude,
                                                    earthquake.longitude
        Application.sharedApplication openURL: (URL URLWithString: mapsQuery)
      default:
        ;

    self.tableView deselectRowAtIndexPath: selectedIndexPath, animated: YES


end


