//
// Eero conversion of example source code provided by Apple.
//
// This file based on file:
//     SeismicXML/ObjC/ParseOperation.m
//
// Please see it for Apple license details.
//
// Abstract: The NSOperation class used to perform the XML parsing of earthquake data.
//
#import "LegacyMacros.h"
#import 'ParseOperation.h'
#import 'Earthquake.h'

// NSNotification name for sending earthquake data back to the app delegate
//
const String kAddEarthquakesNotif = 'AddEarthquakesNotif'

// NSNotification userInfo key for obtaining the earthquake data
//
const String kEarthquakeResultsKey = 'EarthquakeResultsKey'

// NSNotification name for reporting errors
//
const String kEarthquakesErrorNotif = 'EarthquakeErrorNotif'

// NSNotification userInfo key for obtaining the error message
//
const String kEarthquakesMsgErrorKey = 'EarthquakesMsgErrorKey'


//--------------------------------------------------------------------------------------------------
interface ParseOperation () <NSXMLParserDelegate>
  property (nonatomic, retain)
    Earthquake    currentEarthquakeObject
    MutableArray  currentParseBatch
    MutableString currentParsedCharacterData
end

#pragma mark -
#pragma mark Parser constants

// Limit the number of parsed earthquakes to 50
// (a given day may have more than 50 earthquakes around the world, so we only take the first 50)
//
static const UInteger kMaximumNumberOfEarthquakesToParse = 50

// When an Earthquake object has been fully constructed, it must be passed to the main thread and
// the table view in RootViewController must be reloaded to display it. It is not efficient to do
// this for every Earthquake object - the overhead in communicating between the threads and reloading
// the table exceed the benefit to the user. Instead, we pass the objects in batches, sized by the
// constant below. In your application, the optimal batch size will vary 
// depending on the amount of data in the object and other factors, as appropriate.
//
static const UInteger kSizeOfEarthquakeBatch = 10

// Reduce potential parsing errors by using string constants declared in a single place.
//
static const kEntryElementName       := 'entry'
static const kLinkElementName        := 'link'
static const kTitleElementName       := 'title'
static const kUpdatedElementName     := 'updated'
static const kGeoRSSPointElementName := 'georss:point'


//--------------------------------------------------------------------------------------------------
implementation ParseOperation

  synthesize earthquakeData,
             currentEarthquakeObject,
             currentParsedCharacterData,
             currentParseBatch

  //------------------------------------------------------------------------------------------------
  initWithData: Data, return id

    if (self = super.init)
        earthquakeData = data.copy

        dateFormatter = DateFormatter.new
        dateFormatter.setTimeZone: (TimeZone.timeZoneForSecondsFromGMT: 0)
        dateFormatter.setLocale: (Locale.alloc.initWithLocaleIdentifier: 'en_US_POSIX').autorelease
        dateFormatter.setDateFormat: @"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"

    return self

  //------------------------------------------------------------------------------------------------
  addEarthquakesToList: Array earthquakes
    Assert(NSThread.isMainThread)

    NotificationCenter.defaultCenter.postNotificationName: kAddEarthquakesNotif,
                                                  object: self,
                                                userInfo: { kEarthquakeResultsKey : earthquakes }

  //------------------------------------------------------------------------------------------------
  // the main function for this NSOperation, to start the parsing
  //
  main
    self.currentParseBatch = []
    self.currentParsedCharacterData = ''
    
    // It's also possible to have NSXMLParser download the data, by passing it a URL, but this is
    // not desirable because it gives less control over the network, particularly in responding to
    // connection errors.
    //
    parser := XMLParser.alloc.initWithData: self.earthquakeData
    parser.setDelegate: self
    parser.parse
    
    // depending on the total number of earthquakes parsed, the last batch might not have been a
    // "full" batch, and thus not been part of the regular batch transfer. So, we check the count of
    // the array and, if necessary, send it to the main thread.
    //
    if self.currentParseBatch.count > 0
      self.performSelectorOnMainThread: |addEarthquakesToList:|,
                            withObject: self.currentParseBatch,
                         waitUntilDone: NO

    self.currentParseBatch = nil
    self.currentEarthquakeObject = nil
    self.currentParsedCharacterData = nil
    
    parser.release


  //------------------------------------------------------------------------------------------------
  dealloc
    earthquakeData.release
    currentEarthquakeObject.release
    currentParsedCharacterData.release
    currentParseBatch.release
    dateFormatter.release
    super.dealloc

#pragma mark -
#pragma mark NSXMLParser delegate methods

  //------------------------------------------------------------------------------------------------
  parser: XMLParser, didStartElement: String,
                        namespaceURI: String,
                       qualifiedName: String,
                          attributes: Dictionary

    // If the number of parsed earthquakes is greater than
    // kMaximumNumberOfEarthquakesToParse, abort the parse.
    //
    if parsedEarthquakesCounter >= kMaximumNumberOfEarthquakesToParse

      // Use the flag didAbortParsing to distinguish between this deliberate stop
      // and other parser errors.
      //
      didAbortParsing = YES
      parser.abortParsing

    if element == kEntryElementName

      earthquake := Earthquake.new
      self.currentEarthquakeObject = earthquake
      earthquake.release

    else if element == kLinkElementName

      String relAttribute = attributes['rel']

      if relAttribute == 'alternate'
        String USGSWebLink = attributes['href']
        self.currentEarthquakeObject.USGSWebLink = URL.URLWithString: USGSWebLink

    else if element == kTitleElementName or
            element == kUpdatedElementName or
            element == kGeoRSSPointElementName

      // For the 'title', 'updated', or 'georss:point' element begin accumulating parsed character data.
      // The contents are collected in parser:foundCharacters:.
      //
      accumulatingParsedCharacterData = YES

      // The mutable string needs to be reset to empty.
      //
      currentParsedCharacterData.setString: ''

  //------------------------------------------------------------------------------------------------
  parser: XMLParser, didEndElement: String,
                      namespaceURI: String,
                     qualifiedName: String

    if element == kEntryElementName

      self.currentParseBatch.addObject: self.currentEarthquakeObject
      parsedEarthquakesCounter++

      if self.currentParseBatch.count >= kMaximumNumberOfEarthquakesToParse

        self.performSelectorOnMainThread: |addEarthquakesToList:|,
                              withObject: self.currentParseBatch,
                           waitUntilDone: NO

        self.currentParseBatch = []

    else if element == kTitleElementName

      // The title element contains the magnitude and location in the following format:
      // <title>M 3.6, Virgin Islands region<title/>
      // Extract the magnitude and the location using a scanner:
      //
      Scanner scanner = Scanner.scannerWithString: self.currentParsedCharacterData

      // Scan past the "M " before the magnitude.
      if scanner.scanString: 'M ', intoString: NULL
        magnitude := 0.0f

        if scanner.scanFloat: &magnitude
          self.currentEarthquakeObject.magnitude = magnitude

          // Scan past the ", " before the title.
          if scanner.scanString: ', ', intoString: NULL
            String location = nil

            // Scan the remainer of the string.
            if scanner.scanUpToCharactersFromSet: CharacterSet.illegalCharacterSet,
                                      intoString: &location

              self.currentEarthquakeObject.location = location

    else if element == kUpdatedElementName

      if self.currentEarthquakeObject != nil
        self.currentEarthquakeObject.date =
            dateFormatter.dateFromString: self.currentParsedCharacterData
      else
        // kUpdatedElementName can be found outside an entry element (i.e. in the XML header)
        // so don't process it here.
        ;

    else if element == kGeoRSSPointElementName

      // The georss:point element contains the latitude and longitude of the earthquake epicenter.
      // 18.6477 -66.7452
      //
      Scanner scanner = Scanner.scannerWithString: self.currentParsedCharacterData
      double latitude, longitude

      if scanner.scanDouble: &latitude
        if scanner.scanDouble: &longitude
          self.currentEarthquakeObject.latitude = latitude
          self.currentEarthquakeObject.longitude = longitude

    // Stop accumulating parsed character data. We won't start again until specific elements begin.
    accumulatingParsedCharacterData = NO


  //------------------------------------------------------------------------------------------------
  // This method is called by the parser when it find parsed character data ("PCDATA") in an element.
  // The parser is not guaranteed to deliver all of the parsed character data for an element in a single
  // invocation, so it is necessary to accumulate character data until the end of the element is reached.
  //
  parser: XMLParser, foundCharacters: String

    if accumulatingParsedCharacterData
      // If the current element is one whose content we care about, append string
      // to the property that holds the content of the current element.
      //
      self.currentParsedCharacterData << characters


  //------------------------------------------------------------------------------------------------
  // an error occurred while parsing the earthquake data,
  // post the error as an NSNotification to our app delegate.
  // 
  handleEarthquakesError: Error
    NotificationCenter.defaultCenter.postNotificationName: kEarthquakesErrorNotif,
                                                   object: self,
                                                 userInfo: { kEarthquakesMsgErrorKey : error }

  //------------------------------------------------------------------------------------------------
  // an error occurred while parsing the earthquake data,
  // pass the error to the main thread for handling.
  // (note: don't report an error if we aborted the parse due to a max limit of earthquakes)
  //
  parser: XMLParser, parseErrorOccurred: Error error

    if error.code != (int)XMLParserDelegateAbortedParseError and not didAbortParsing

      self.performSelectorOnMainThread: |handleEarthquakesError:|,
                            withObject: error,
                         waitUntilDone: NO


end

