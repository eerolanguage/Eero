/**
    Eero LLVM Compiler 3.0 build task

    Original file on which this is based is
    Copyright (c) 2000-2011 Apple Inc.  All rights reserved.
*/

(
    {
        Identifier = "org.eerolanguage.compilers.clang.1_0";
        Type = Compiler;
        Class = "XCCompilerSpecificationClang";
        Name = "Eero LLVM compiler 3.0 (based on LLVM 3.0)";
        Description = "Eero LLVM compiler 3.0";
        Vendor = eerolanguage.org;
        Version = "1.0";
        IsAbstract = NO;
        ShowInCompilerSelectionPopup = YES;
        FileTypes = (
            "sourcecode.c.c",
            "sourcecode.c.objc",
            "sourcecode.eero",
            "sourcecode.cpp.cpp",
            "sourcecode.cpp.objcpp",
            "sourcecode.asm",
        );
        OptionConditionFlavors = (
            arch,
            sdk,
        );
        BuiltinJambaseRuleName = ProcessC;
        ExecPath = "$(PLATFORM_DEVELOPER_BIN_DIR)/clang";
        UseCPlusPlusCompilerDriverWhenBundlizing = Yes;
        CommandOutputParser = "XCClangCommandOutputParser";
        SupportsHeadermaps = Yes;
        DashIFlagAcceptsHeadermaps = Yes;
        SupportsIsysroot = Yes;
        SupportsPredictiveCompilation = No;
        SupportsSeparateUserHeaderPaths = Yes;
        SupportsMacOSXDeploymentTarget = Yes;
        SupportsMacOSXMinVersionFlag = Yes;
        PatternsOfFlagsNotAffectingPrecomps = (
            "-v",
            "-###",
            "-H",
            "-time",
            "-save-temps",
            "-W*",
            "-w",
        );
        MessageCategoryInfoOptions = ( "--print-diagnostic-categories" );
        Options = (
            {
                Name = arch;
                Type = String;
                CommandLineArgs = {
                    "<<otherwise>>" = (
                        "-arch",
                        "$(value)",
                    );
                };
            },
            {
                Name = "diagnostic_message_length";
                Type = String;
                DefaultValue = 0;
                CommandLinePrefixFlag = "-fmessage-length=";
            },
            {
                Name = "print_source_range_info";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineFlag = "-fdiagnostics-print-source-range-info";
            },
            {
                Name = "print_message_category_id";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineFlag = "-fdiagnostics-show-category=id";
            },
            {
                Name = "print_parseable_fixits";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineFlag = "-fdiagnostics-parseable-fixits";
            },
            {
                Name = "GCC_INPUT_FILETYPE";
                Type = Enumeration;
                AllowedValues = (
                    automatic,
                    "sourcecode.c.c",
                    "sourcecode.c.objc",
                    "sourcecode.eero",                    
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                DefaultValue = automatic;
                Category = Language;
            },
            {
                Name = "GCC_OPERATION";
                Type = Enumeration;
                AllowedValues = (
                    compile,
                    "generate-preprocessed",
                    "generate-assembler",
                    precompile,
                    "separate-symbols",
                );
                DefaultValue = compile;
            },
            {
                Name = "GCC_USE_STANDARD_INCLUDE_SEARCHING";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-nostdinc",
                    );
                };
                Category = Language;
            },
            {
                Name = "GCC_C_LANGUAGE_STANDARD";
                Type = Enumeration;
                AllowedValues = (
                    ansi,
                    c89,
                    gnu89,
                    c99,
                    gnu99,
                    "compiler-default",
                );
                DefaultValue = "compiler-default";
                CommandLineArgs = {
                    ansi = (
                        "-ansi",
                    );
                    "compiler-default" = ();
                    "<<otherwise>>" = (
                        "-std=$(value)",
                    );
                };
                FileTypes = (
                    "sourcecode.c.c",
                    "sourcecode.c.objc",
                    "sourcecode.eero",                    
                );
                Category = Language;
            },
            {
                Name = "CLANG_CXX_LANGUAGE_STANDARD";
                Type = Enumeration;
                AllowedValues = (
                    "c++98",
                    "gnu++98",
                    "c++0x",
                    "gnu++0x",
                    "compiler-default",
                );
                DefaultValue = "compiler-default";
                CommandLineArgs = {
                    "compiler-default" = ();
                    "<<otherwise>>" = (
                        "-std=$(value)",
                    );
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "CLANG_CXX_LIBRARY";
                Type = Enumeration;
                AllowedValues = (
                  "libstdc++",
                  "libc++",
                  "compiler-default",
                );
                DefaultValue = "compiler-default";
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                CommandLineArgs = {
                  "compiler-default" = ();
                  "<<otherwise>>" = ( "-stdlib=$(value)" );
                };
                AdditionalLinkerArgs = {
                  "compiler-default" = ();
                  "<<otherwise>>" = ( "-stdlib=$(value)" );
                };
                AppearsAfter = "CLANG_CXX_LANGUAGE_STANDARD";
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_OBJC_GC";
                Type = Enumeration;
                AllowedValues = (
                    unsupported,
                    supported,
                    required,
                );
                DefaultValue = unsupported;
                CommandLineArgs = {
                    unsupported = ();
                    supported = (
                        "-fobjc-gc",
                    );
                    required = (
                        "-fobjc-gc-only",
                    );
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "CLANG_ENABLE_OBJC_ARC";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                  YES = (
                      "-fobjc-arc",
                  );
                  NO = ();
                };
                AdditionalLinkerArgs = {
                  YES = (
                      "-fobjc-arc",
                  );
                  NO = ();
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Condition = "$(GCC_ENABLE_OBJC_GC) == unsupported";
                Category = Language;
            },
            {
                Name = "GCC_CHAR_IS_UNSIGNED_CHAR";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-funsigned-char",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_ASM_KEYWORD";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-asm",
                    );
                };
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_BUILTIN_FUNCTIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-builtin",
                    );
                };
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_TRIGRAPHS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-trigraphs",
                    );
                    NO = (
                        "-Wno-trigraphs",
                    );
                };
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_CPP_EXCEPTIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-exceptions",
                    );
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_CPP_RTTI";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-rtti",
                    );
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_PASCAL_STRINGS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-fpascal-strings",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_SHORT_ENUMS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fshort-enums",
                     );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_FORCE_CPU_SUBTYPE_ALL";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-force_cpusubtype_ALL",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_LINK_WITH_DYNAMIC_LIBRARIES";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-static",
                    );
                };
                Category = Language;
            },
            {
                Name = "GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-msoft-float",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_USE_INDIRECT_FUNCTION_CALLS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-mlong-branch",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_USE_REGISTER_FUNCTION_CALLS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-mlong-calls",
                    );
                    NO = ();
                };
                Category = Language;
            },
            {
                Name = "GCC_PREFIX_HEADER";
                Type = String;
                DefaultValue = "";
                Category = Language;
                ConditionFlavors = ();
            },
            {
                Name = "GCC_PRECOMPILE_PREFIX_HEADER";
                Type = Boolean;
                DefaultValue = NO;
                Category = Language;
                ConditionFlavors = ();
            },
            {
                Name = "GCC_INCREASE_PRECOMPILED_HEADER_SHARING";
                Type = Boolean;
                DefaultValue = NO;
                Category = Language;
                ConditionFlavors = ();
            },
            {
                Name = "OTHER_CFLAGS";
                Type = StringList;
                FileTypes = (
                    "sourcecode.c.c",
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                );
                Category = Language;
            },
            {
                Name = "OTHER_CPLUSPLUSFLAGS";
                Type = StringList;
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "GCC_GENERATE_DEBUGGING_SYMBOLS";
                Type = Boolean;
                DefaultValue = YES;
                Category = CodeGeneration;
            },
            {
                Name = "GCC_OPTIMIZATION_LEVEL";
                Type = Enumeration;
                AllowedValues = (
                    0,
                    1,
                    2,
                    3,
                    s,
                );
                DefaultValue = s;
                CommandLineArgs = (
                    "-O$(value)",
                );
                Category = CodeGeneration;
            },
            {
                Name = "LLVM_LTO";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-flto",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_NO_COMMON_BLOCKS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fno-common",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_REUSE_STRINGS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fwritable-strings",
                    );
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_DYNAMIC_NO_PIC";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-mdynamic-no-pic",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_ENABLE_KERNEL_DEVELOPMENT";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-mkernel",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
                Description = "Activating this setting enables kernel development mode.  This mode sets -static, -fno-common, -fno-cxa-atexit, -fno-exceptions, -fno-non-call-exceptions, -fapple-kext, -fno-weak and -fno-rtti where applicable.  This mode also sets -mno-altivec, -msoft-float, -fno-builtin and -mlong-branch for PowerPC targets. [GCC_ENABLE_KERNEL_DEVELOPMENT, -mkernel]";
            },
            {
                Name = "GCC_TREAT_WARNINGS_AS_ERRORS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Werror",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Werror-implicit-function-declaration",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.c.c",
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                );
                Category = Warnings;
                AppearsAfter = "GCC_TREAT_WARNINGS_AS_ERRORS";
            },
            {
                Name = "GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Werror=incompatible-pointer-types",
                    );
                    NO = ();
                };
                Category = Warnings;
                AppearsAfter = "GCC_TREAT_WARNINGS_AS_ERRORS";
            },
            {
                Name = "GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wmissing-field-initializers",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_ABOUT_MISSING_PROTOTYPES";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wmissing-prototypes",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_ABOUT_RETURN_TYPE";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wreturn-type",
                    );
                    NO = (
                        "-Wno-return-type",
                    );
                };
                Category = Warnings;
            },
	    {
		Name = "CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES";
		Type = Boolean;
		DefaultValue = NO;
		CommandLineArgs = {
		  YES = ( "-Wimplicit-atomic-properties" );
		  NO = ();
		};
		FileTypes = (
		    "sourcecode.c.objc",
        "sourcecode.eero",
		    "sourcecode.cpp.objcpp",
		);
                Category = Warnings;
	    },
            {
                Name = "GCC_WARN_NON_VIRTUAL_DESTRUCTOR";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wnon-virtual-dtor",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Woverloaded-virtual",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_TYPECHECK_CALLS_TO_PRINTF";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Wno-format",
                    );
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wmissing-braces",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_MISSING_PARENTHESES";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-Wparentheses",
                    );
                    NO = (
                        "-Wno-parentheses",
                    );
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_CHECK_SWITCH_STATEMENTS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-Wswitch",
                    );
                    NO = (
                        "-Wno-switch",
                    );
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNUSED_FUNCTION";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wunused-function",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNUSED_LABEL";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wunused-label",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNINITIALIZED_AUTOS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wuninitialized",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNKNOWN_PRAGMAS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wunknown-pragmas",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_INHIBIT_ALL_WARNINGS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-w",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_PEDANTIC";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-pedantic",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_SHADOW";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wshadow",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_FOUR_CHARACTER_CONSTANTS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wfour-char-constants",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_SIGN_COMPARE";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wsign-compare",
                    );
                    NO = ();
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wselector",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_STRICT_SELECTOR_MATCH";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wstrict-selector-match",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNDECLARED_SELECTOR";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wundeclared-selector",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wdeprecated-implementations",
                    );
                    NO = ();
                };
                FileTypes = (
                  "sourcecode.c.objc",
                  "sourcecode.eero",
                  "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "CLANG_WARN_OBJCPP_ARC_ABI";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                  YES = ( "-Warc-abi" );
                  NO = ( "-Wno-arc-abi" );
                };
                FileTypes = (
                  "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "CLANG_WARN_CXX0X_EXTENSIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ( "-Wc++0x-extensions", );
                    NO = ( "-Wno-c++0x-extensions", ) ;
                };
                FileTypes = (
                  "sourcecode.cpp.cpp",
                  "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "WARNING_CFLAGS";
                Type = StringList;
                DefaultValue = "";
                Category = Warnings;
            },
            {
                Name = "GCC_PREPROCESSOR_DEFINITIONS";
                Type = StringList;
                DefaultValue = "";
                CommandLineArgs = (
                    "-D$(value)",
                );
                Category = Preprocessing;
            },
            {
                Name = "GCC_PRODUCT_TYPE_PREPROCESSOR_DEFINITIONS";
                Type = StringList;
                DefaultValue = "";
                CommandLineArgs = (
                    "-D$(value)",
                );
            },
            {
                Name = "GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS";
                Type = StringList;
                DefaultValue = "";
                Category = Preprocessing;
            },
            {
                Name = "USE_HEADERMAP";
                Type = Boolean;
                DefaultValue = YES;
            },
            {
                Name = "HEADERMAP_FILE_FORMAT";
                Type = Enumeration;
                AllowedValues = (
                    traditional,
                );
                DefaultValue = traditional;
            },
            {
                Name = "CPP_HEADERMAP_FILE";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME).hmap";
            },
            {
                Name = "CPP_HEADERMAP_FILE_FOR_GENERATED_FILES";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-generated-files.hmap";
            },
            {
                Name = "CPP_HEADERMAP_FILE_FOR_OWN_TARGET_HEADERS";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-own-target-headers.hmap";
            },
            {
                Name = "CPP_HEADERMAP_FILE_FOR_ALL_TARGET_HEADERS";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-all-target-headers.hmap";
            },
            {
                Name = "CPP_HEADERMAP_FILE_FOR_PROJECT_FILES";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME)-project-headers.hmap";
            },
            {
                Name = "USE_HEADER_SYMLINKS";
                Type = Boolean;
                DefaultValue = NO;
            },
            {
                Name = "CPP_HEADER_SYMLINKS_DIR";
                Type = Path;
                DefaultValue = "$(TEMP_DIR)/$(PRODUCT_NAME).hdrs";
            },
            {
                Name = SDKROOT;
                Type = Path;
                CommandLineFlag = "-isysroot";
            },
            {
                Name = "GCC_USE_GCC3_PFE_SUPPORT";
                Type = Boolean;
                DefaultValue = YES;
            },
            {
                Name = "GCC_PFE_FILE_C_DIALECTS";
                Type = StringList;
                DefaultValue = "c objective-c c++ objective-c++";
            },
            {
                Name = "ENABLE_APPLE_KEXT_CODE_GENERATION";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fapple-kext",
                    );
                    NO = ();
                };
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
            },
            {
                Name = "GCC_WARN_UNUSED_PARAMETER";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wunused-parameter",
                    );
                    NO = (
                        "-Wno-unused-parameter",
                    );
                };
                AppearsAfter = "GCC_WARN_UNUSED_LABEL";
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNUSED_VARIABLE";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wunused-variable",
                    );
                    NO = (
                        "-Wno-unused-variable",
                    );
                };
                AppearsAfter = "GCC_WARN_UNUSED_PARAMETER";
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_UNUSED_VALUE";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-Wunused-value",
                    );
                    NO = (
                       "-Wno-unused-value",
                    );
                };
                AppearsAfter = "GCC_WARN_UNUSED_VARIABLE";
                Category = Warnings;
            },
            {
                Name = "GCC_ENABLE_EXCEPTIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineFlag = "-fexceptions";
            },
            {
                Name = "GCC_ENABLE_OBJC_EXCEPTIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-objc-exceptions",
                    );
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Language;
            },
            {
                Name = "GCC_CW_ASM_SYNTAX";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-fasm-blocks",
                    );
                    NO = ();
                };
                Architectures = (i386, x86_64);
                Category = Language;
            },
            {
                Name = "GCC_FAST_OBJC_DISPATCH";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-objc-direct-dispatch",
                    );
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = CodeGeneration;
            },
            {
                Name = "GCC_UNROLL_LOOPS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-funroll-loops",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_FAST_MATH";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-ffast-math",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_STRICT_ALIASING";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fstrict-aliasing",
                    );
                    NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_INSTRUMENT_PROGRAM_FLOW_ARCS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fprofile-arcs",
                    );
                    NO = ();
                };
                AdditionalLinkerArgs = {
                  YES = (
                      "-fprofile-arcs",
                  );
                  NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_GENERATE_TEST_COVERAGE_FILES";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-ftest-coverage",
                    );
                    NO = ();
                };
                AdditionalLinkerArgs = {
                  YES = (
                      "-ftest-coverage",
                  );
                  NO = ();
                };
                Category = CodeGeneration;
            },
            {
                Name = "GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Wno-protocol",
                    );
                };
                FileTypes = (
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                    "sourcecode.cpp.objcpp",
                );
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Wno-deprecated-declarations",
                    );
                };
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO";
                Type = Boolean;
                DefaultValue = YES;
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Wno-invalid-offsetof",
                    );
                };
                Category = Warnings;
            },
            {
                Name = "GCC_MACOSX_VERSION_MIN";
                Type = String;
                DefaultValue = "$(MACOSX_DEPLOYMENT_TARGET)";
                CommandLineArgs = {
                    "" = ();
                    "<<otherwise>>" = (
                        "-mmacosx-version-min=$(value)",
                    );
                };
            },
            {
                Name = "GCC_DEBUG_INFORMATION_FORMAT";
                Type = Enumeration;
                AllowedValues = (
                    dwarf,
                    "dwarf-with-dsym",
                );
                CommandLineArgs = {
                    dwarf = (
                        "-gdwarf-2",
                    );
                    "dwarf-with-dsym" = (
                        "-gdwarf-2",
                    );
                    "<<otherwise>>" = ();
                };
                DefaultValue = "$(DEBUG_INFORMATION_FORMAT)";
                Condition = "$(GCC_GENERATE_DEBUGGING_SYMBOLS)";
                CommonOption = NO;
            },
            {
                Name = "GCC_ENABLE_SSE3_EXTENSIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-msse3",
                    );
                    NO = ();
                };
                Architectures = (
                    i386,
                    "x86_64",
                );
                AppearsAfter = "GCC_AUTO_VECTORIZATION";
                Category = CodeGeneration;
                DisplayName = "Enable SSE3 Extensions";
                Description = "Enables the use of instructions in the SSE3 extended instruction set.  Only used when targeting Intel architectures. [GCC_ENABLE_SSE3_EXTENSIONS, -msse3]";
            },
            {
                Name = "GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-mssse3",
                    );
                    NO = ();
                };
                Architectures = (
                    i386,
                    "x86_64",
                );
                AppearsAfter = "GCC_ENABLE_SSE3_EXTENSIONS";
                Category = CodeGeneration;
                DisplayName = "Enable Supplemental SSE3 Instructions";
                Description = "Enables the use of instructions in the MMX, SSE, SSE2, and SSE3 extensions of the instruction set.  Only used when targeting Intel architectures. [GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS, -mssse3]";
            },
            {
                Name = "GCC_ENABLE_SSE41_EXTENSIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-msse4.1",
                    );
                    NO = ();
                };
                Architectures = (
                    i386,
                    "x86_64",
                );
                AppearsAfter = "GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS";
                Category = CodeGeneration;
                DisplayName = "Enable SSE4.1 Extensions";
                Description = "Enables the use of instructions in the SSE4.1 extended instruction set.  Only used when targeting Intel architectures. [GCC_ENABLE_SSE41_EXTENSIONS, -msse4.1]";
            },
            {
                Name = "GCC_ENABLE_SSE42_EXTENSIONS";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-msse4.2",
                    );
                    NO = ();
                };
                Architectures = (
                    i386,
                    "x86_64",
                );
                AppearsAfter = "GCC_ENABLE_SSE41_EXTENSIONS";
                Category = CodeGeneration;
                DisplayName = "Enable SSE4.2 Extensions";
                Description = "Enables the use of instructions in the SSE4.2 extended instruction set.  Only used when targeting Intel architectures. [GCC_ENABLE_SSE42_EXTENSIONS, -msse42]";
            },
            {
                Name = "GCC_SYMBOLS_PRIVATE_EXTERN";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fvisibility=hidden",
                    );
                    NO = ();
                };
                AppearsAfter = "GCC_FEEDBACK_DIRECTED_OPTIMIZATION";
                Category = CodeGeneration;
                DisplayName = "Symbols Hidden by Default";
                Description = "When enabled, all symbols are declared 'private extern' unless explicitly marked to be exported using '__attribute__((visibility(\"default\")))' in code. If not enabled, all symbols are exported unless explicitly marked as 'private extern'.\n            For more information, see <file:///Developer/ADC%20Reference%20Library/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html>. [GCC_SYMBOLS_PRIVATE_EXTERN, -fvisibility=hidden]";
            },
            {
                Name = "GCC_INLINES_ARE_PRIVATE_EXTERN";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fvisibility-inlines-hidden",
                    );
                    NO = ();
                };
                AppearsAfter = "GCC_SYMBOLS_PRIVATE_EXTERN";
                Category = CodeGeneration;
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                DisplayName = "Inline Methods Hidden";
                Description = "When enabled, out-of-line copies of inline methods are declared 'private extern'. [GCC_INLINES_ARE_PRIVATE_EXTERN, -fvisibility-inlines-hidden]";
            },
            {
                Name = "GCC_THREADSAFE_STATICS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-fno-threadsafe-statics",
                    );
                };
                AppearsAfter = "GCC_INLINES_ARE_PRIVATE_EXTERN";
                Category = CodeGeneration;
                FileTypes = (
                    "sourcecode.cpp.cpp",
                    "sourcecode.cpp.objcpp",
                );
                DisplayName = "Statics are Thread-Safe";
                Description = "Emits extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics. You can disable this option to reduce code size slightly in code that doesn't need to be thread-safe.  [GCC_THREADSAFE_STATICS, -fno-threadsafe-statics]";
            },
            {
                Name = "GCC_WARN_ABOUT_POINTER_SIGNEDNESS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Wno-pointer-sign",
                    );
                };
                FileTypes = (
                    "sourcecode.c.c",
                    "sourcecode.c.objc",
                    "sourcecode.eero",
                );
                AppearsAfter = "GCC_WARN_SIGN_COMPARE";
                Category = Warnings;
                CommonOption = YES;
                DisplayName = "Pointer Sign Comparison";
                Description = "Warn when pointers passed via arguments or assigned to a variable differ in sign.  [GCC_WARN_ABOUT_POINTER_SIGNEDNESS, -Wno-pointer-sign]";
            },
            {
                Name = "GCC_WARN_ABOUT_MISSING_NEWLINE";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wnewline-eof",
                    );
                    NO = ();
                };
                AppearsAfter = "GCC_WARN_ABOUT_POINTER_SIGNEDNESS";
                Category = Warnings;
                CommonOption = NO;
                DisplayName = "Missing Newline At End Of File";
                Description = "Warn when a source file does not end with a newline.  [GCC_WARN_ABOUT_MISSING_NEWLINE, -Wnewline-eof]";
            }, 
            {
                Name = "CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                  YES = (
                    "-Wconversion",
                  );
                  NO = ();
                };
                CommonOption = NO;
                Category = Warnings;
            },
            {
                Name = "CLANG_WARN_IMPLICIT_SIGN_CONVERSION";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                  YES = ( 
                    "-Wsign-conversion",
                  );
                  NO = ( 
                    "-Wno-sign-conversion",
                  );
                };
                CommonOption = NO;
                Category = Warnings;
            },
            {
                Name = "GCC_WARN_64_TO_32_BIT_CONVERSION";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Wshorten-64-to-32",
                    );
                    NO = (
                        "-Wno-shorten-64-to-32"
                    );
                };
                AppearsAfter = "GCC_WARN_SIGN_COMPARE";
                Category = Warnings;
                CommonOption = NO;
                DisplayName = "Implicit Conversion to 32 Bit Type";
                Description = "Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.  [GCC_WARN_64_TO_32_BIT_CONVERSION, -Wshorten-64-to-32]";
            },
            {
                Name = "GCC_THUMB_SUPPORT";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-mthumb",
                    );
                    NO = ();
                };
                Architectures = (
                    armv6,
                    armv7,
                );
            },
            {
                Name = "GCC_OBJC_ABI_VERSION";
                Type = Enumeration;
                AllowedValues = (
                    1,
                    2,
                );
                DefaultValue = "$(OBJC_ABI_VERSION)";
                CommandLineArgs = {
                    "" = ();
                    "<<otherwise>>" = (
                        "-fobjc-abi-version=$(value)"
                    );
                };
                FileTypes = (
                    sourcecode.c.objc,
                    sourcecode.eero,
                    sourcecode.cpp.objcpp,
                );
                // Category is hidden -- used by iPhoneSimulator to match runtime OS setup;
            },
            {
                Name = "GCC_OBJC_LEGACY_DISPATCH";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-fobjc-legacy-dispatch",
                    );
                    NO = ();
                };
                FileTypes = (
                    sourcecode.c.objc,
                    sourcecode.eero,
                    sourcecode.cpp.objcpp,
                );
                // Category is hidden -- used by iPhoneSimulator to match runtime OS setup;
            },
            {
                Name = "CLANG_IBOUTLET";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-DIBOutlet=__attribute__((iboutlet))",
                    );
                    NO = ();
                };
                FileTypes = (
                    sourcecode.c.objc,
                    sourcecode.eero,
                    sourcecode.cpp.objcpp,
                );
                // Category is hidden.
            },
            {
                Name = "CLANG_IBOUTLETCOLLECTION";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-DIBOutletCollection(ClassName)=__attribute__((iboutletcollection(ClassName)))",
                    );
                    NO = ();
                };
                FileTypes = (
                    sourcecode.c.objc,
                    sourcecode.eero,
                    sourcecode.cpp.objcpp,
                );
                // Category is hidden.
            },
            {
                Name = "CLANG_IBACTION";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-DIBAction=void)__attribute__((ibaction)",
                    );
                    NO = ();
                };
                FileTypes = (
                    sourcecode.c.objc,
                    sourcecode.eero,
                    sourcecode.cpp.objcpp,
                );
                // Category is hidden.
            },

            // These 4 settings are used by Xcode's migration tool.
            // They should not be removed.
            // They do not show up in the user visible build settings.
            {
                Name = "CLANG_ARC_MIGRATE_PRECHECK";
                Type = Enumeration;
                AllowedValues = (
                    donothing,
                    precheck,
                );
                DefaultValue = donothing;
                CommandLineArgs = {
                    donothing = ();
                    precheck = (
                        "-ccc-arcmt-check",
                    );
                };
            },
            {
                Name = "CLANG_ARC_MIGRATE_DIR";
                Type = Path;
                CommandLineFlag = "-ccc-arcmt-migrate";
                // Category is hidden.
            },
            {
                Name = "CLANG_ARC_MIGRATE_EMIT_ERROR";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-arcmt-migrate-emit-errors",
                    );
                    NO = ();
                };
                // Category is hidden.
            },
            {
                Name = "CLANG_ARC_MIGRATE_REPORT_OUTPUT";
                Type = Path;
                CommandLineFlag = "-arcmt-migrate-report-output";
                // Category is hidden.
            },
        );
    },
    
    {
        Identifier = "org.eerolanguage.compilers.clang.1_0.compiler";
        Type = Compiler;
        BasedOn = "org.eerolanguage.compilers.clang.1_0";
        Name = "Eero LLVM compiler 3.0 (based on LLVM 3.0)";
        Description = "Eero LLVM compiler 3.0";
        IsAbstract = YES;
        ShowInCompilerSelectionPopup = NO;
        Architectures = (
            i386,
            "x86_64",
            armv6,
            armv7,
        );
        "OptionConditionFlavors" = (
            arch,
            sdk,
        );
        FallbackTools = (
            "com.apple.compilers.llvmgcc42",
        );
        ExecCPlusPlusLinkerPath = "$(PLATFORM_DEVELOPER_BIN_DIR)/clang++";
        SupportsGeneratePreprocessedFile = YES;
        SupportsGenerateAssemblyFile = YES;
        CommandResultsPostprocessor = "XCClangResultsPostprocessor";
        SupportsSerializedDiagnostics = YES;
        Options = ();
    },
    
    {
        Identifier = "org.eerolanguage.compilers.clang.1_0.analyzer";
        Type = Compiler;
        BasedOn = "org.eerolanguage.compilers.clang.1_0";
        Name = "Static Analyzer";
        Description = "Eero Clang Static Analyzer 3.0";
        Architectures = (
            i386,
            "x86_64",
            armv6,
            armv7,
        );
        ExecPath = "$(CLANG)";
        RuleName = "Analyze $(InputFile)";
        OutputDir = "$(TEMP_DIR)/StaticAnalyzer/$(CURRENT_VARIANT)/$(CURRENT_ARCH)";
        OutputFileExtension = plist;
        OutputsAreProducts = YES;
        IsAbstract = YES;
        ShowInCompilerSelectionPopup = NO;
        ShowOnlySelfDefinedProperties = YES;
        SoftError = YES;
        CommandOutputParser = (
            ("^([^:]*):([0-9]*):[0-9]*: [^:]*error: (.*)$", "emit-analyzer-warning"),
            ("^([^:]*):() [^:]*error: (.*)$", "emit-analyzer-warning"),
            ("^()()error: (.*)$", "emit-analyzer-warning"),
        );
        CommandResultsPostprocessor = "XCStaticAnalyzerResultsPostprocessor";
        SourceFileOption = "--analyze";
        FileTypes = (
            "sourcecode.c.c",
            "sourcecode.c.objc",
            "sourcecode.c.eero",
            "sourcecode.cpp.cpp",
            "sourcecode.cpp.objcpp",
        );
        Options = (
            {
                Name = CLANG;
                Type = Path;
                DefaultValue = "/usr/local/eerolanguage/bin/clang";
            },
            {
                Name = "CLANG_ANALYZER_DEADCODE_DEADSTORES";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Xclang", "-analyzer-disable-checker",
                        "-Xclang", "deadcode.DeadStores"
                    );
                };
                Category = CheckerOptions;
            },
            {
                Name = "CLANG_ANALYZER_DEADCODE_IDEMPOTENT_OPERATIONS";
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = ();
                    NO = (
                        "-Xclang", "-analyzer-disable-checker",
                        "-Xclang", "deadcode.IdempotentOperations"
                    );
                };
                Category = CheckerOptions;
            },
            {
               Name = "CLANG_ANALYZER_OBJC_SELF_INIT";
               Type = Boolean;
               DefaultValue = YES;
               CommandLineArgs = {
                  YES = ( "-Xclang", "-analyzer-checker",
                          "-Xclang", "osx.cocoa.experimental.SelfInit" 
                  );
                  NO = ();
               };
               FileTypes = (
                  "sourcecode.c.objc",
                  "sourcecode.eero",
                  "sourcecode.cpp.objcpp",
               );
               Category = CheckerOptions;
            },
            {
                Name = "CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL";
                Type = Boolean;
                DefaultValue = NO;
                CommandLineArgs = {
                    YES = (
                        "-Xclang", "-analyzer-checker",
                        "-Xclang", "core.experimental.Overflow",
                        "-Xclang", "-analyzer-checker",
                        "-Xclang", "security.experimental.ArrayBoundV2",
                        "-Xclang", "-analyzer-max-loop",
                        "-Xclang", "100"
                    );
                    NO = ();
                };
                // Category is hidden.
            },
        );
    },
    
    {
        Identifier = "org.eerolanguage.compilers.clang.1_0.astbuilder";
        Type = Compiler;
        BasedOn = "org.eerolanguage.compilers.clang.1_0";
        Name = "AST Builder";
        Description = "Eero Clang AST Builder 1.0";
        FileTypes = (
            "sourcecode.c.c",
            "sourcecode.c.objc",
            "sourcecode.eero",
            "sourcecode.cpp.cpp",
            "sourcecode.cpp.objcpp",
        );
        SourceFileOption = "-fsyntax-only";
        OverridingProperties = {  
            "ENABLE_HEADER_DEPENDENCIES" = YES;
            "SHARED_PRECOMPS_DIR" = "$(INDEX_PRECOMPS_DIR)";
            "CLEAN_PRECOMPS" = NO;
        };
        RuleName = "Build AST from $(InputFile)";
        OutputFileExtension = ast;
        IsAbstract = YES;
        ShowInCompilerSelectionPopup = NO;
        PrunePrecompiledHeaderCache = NO;
    },
)
