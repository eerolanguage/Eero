//
// Basic support for Eero source files. Uses python indentation module for
// foldable blocks, but this is not perfect. For example, comments are
// not ignored (the compiler ignores them, however).
//
// Install this file in directory:
//     ~/Library/Application\ Support/Developer/Shared/Xcode/Specifications/
//
// Only tested with Xcode 3.2.4.
//
// THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// WITH THIS SOFTWARE.
//
(

/****************************************************************************/
// MARK: Strings and Characters
/****************************************************************************/

    {
        Identifier = "xcode.lang.string.objc";
        Syntax = {
            Start = "@\"";
            EscapeChar = "\\";
            End = "\"";
            Type = "xcode.syntax.string";
        };
    },

/****************************************************************************/
// MARK: Objective-C keywords
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.identifier";
        Syntax = {
            StartChars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                // keywords from C
                "__alignof__",
                "__asm__",
                "__attribute__",
                "__complex__",
                "__extension__",
                "__imag__",
                "__label__",
                "__real__",
                "__restrict",
                "__restrict__",
                "__typeof__",
                "_Bool",
                "_Complex",
                "_Imaginary",
                "__block",
                "asm",
                "auto",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "pascal",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",

                // keywords from Objective-C
                "_cmd",
                "__strong",
                "__weak",
                "@catch",
                "@class",
                "@defs",
                "@dynamic",
                "@encode",
                "@end",
                "@finally",
                "@implementation",
                "@interface",
                "@optional",
                "@package",
                "@private",
                "@property",
                "@protected",
                "@protocol",
                "@public",
                "@required",
                "@selector",
                "@synchronized",
                "@synthesize",
                "@throw",
                "@try",
                "bycopy",
                "byref",
                "in",
                "inout",
                "oneway",
                "out",
                "BOOL",
                "IBAction",
                "IBOutlet",
                "IBOutletCollection",
                "IMP",
                "NO",
                "NS_DURING",
                "NS_ENDHANDLER",
                "NS_HANDLER",
                "NS_VALUERETURN",
                "NS_VOIDRETURN",
                "Nil",
                "SEL",
                "YES",
                "id",
                "nil",
                "self",
                "super",

                // keywords from Eero
                "and",
                "and_eq",
                "bitand",
                "bitor",
                "class",
                "compl",
                "false",
                "not",
                "not_eq",
                "or",
                "or_eq",
                "private",
                "protected",
                "public",
                "true",
                "xor",
                "xor_eq",

            );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },

/****************************************************************************/
// MARK: Objective-C Top-Level
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero";
        Description = "Eero Coloring";
        BasedOn = "xcode.lang.c";
        IncludeInMenu = YES;
        Name = "Eero";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.eero.enumblock",
                "xcode.lang.eero.c.block.toplevel",
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.parenexpr",
                "xcode.lang.eero.interface",
                "xcode.lang.eero.implementation",
                "xcode.lang.eero.protocol.declaration",
                "xcode.lang.eero.protocol",
                "xcode.lang.eero.function.declaration",
                "xcode.lang.eero.function.definition",
                "xcode.lang.eero.property.declaration",
                "xcode.lang.eero.typedef",
            );
            Type = "xcode.syntax.plain";
        };
    },

    // toplevel blocks like namespaces and extern "C"
    {
        Identifier = "xcode.lang.eero.c.block.toplevel";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.eero.c.block",
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.parenexpr",
                "xcode.lang.eero.interface",
                "xcode.lang.eero.implementation",
                "xcode.lang.eero.protocol.declaration",
                "xcode.lang.eero.protocol",
                "xcode.lang.eero.function.declaration",
                "xcode.lang.eero.function.definition",
                "xcode.lang.eero.property.declaration",
                "xcode.lang.eero.typedef",
            );
            Type = "xcode.syntax.plain";
        };
    },

/****************************************************************************/
// MARK: Lexers
/****************************************************************************/

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.eero.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.interface.declarator",
                "xcode.lang.eero.implementation.declarator",
                "xcode.lang.eero.protocol.declarator",
                "xcode.lang.eero.property.declarator",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.comma_eol";
        Syntax = {
            Match = ( "^,[ \t]*$", );
        };
    },
    {
        Identifier = "xcode.lang.eero.lexer.method.declarator";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
                "xcode.lang.eero.comma_eol",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.operator_eol";
        Syntax = {
            Match = ( "^(=|\\+|-|\\*|/|&&|\\|\\||>|<|%|\\^|&|\\|)[ \t]*$", );
        };
    },
    {
        Identifier = "xcode.lang.eero.operator.iso646.wrap_eol";
        Syntax = {
            Match = ( "^(and|and_eq|bitand|bitor|not_eq|or|or_eq|xor|xor_eq)[ \t]*$", );
        };
    },
    {
        Identifier = "xcode.lang.eero.lexer.indentation";
        Syntax = {
            SourceScannerClassName = "XCPythonScanner";  // does the magical indentation parsing
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
                "xcode.lang.eero.comma_eol",
                "xcode.lang.eero.operator_eol",
                "xcode.lang.eero.operator.iso646.wrap_eol",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.attribute";
            Rules = (
                "__attribute__",
                "xcode.lang.eero.parenexpr.attribute",
            );
            Type = "xcode.syntax.c.attribute";
        };
    },
    {
        Identifier = "xcode.lang.eero.lexer.attribute";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.parenexpr.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.attribute";
            Start = "(";
            End = ")";
            Recursive = YES;
        };
    },
    {
        Identifier = "xcode.lang.eero.implementation.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "@implementation",
                "xcode.lang.eero.classnameclause",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.interface.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "@interface",
                "xcode.lang.eero.classnameclause",
                "xcode.lang.eero.baseclassclause?",
                "xcode.lang.eero.protocolclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocol.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "@protocol",
                "xcode.lang.eero.protocolname",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.classnameclause";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.classname",
                "xcode.lang.eero.categoryclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.baseclassclause";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                ":",
                "xcode.lang.eero.classname",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.classname";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocolname";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocol.openangle";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "<",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocol.closeangle";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                ">",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocolclause";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.protocol.openangle",
                "xcode.lang.eero.protocolname",
                "xcode.lang.eero.protocol.protocollist*",
                "xcode.lang.eero.protocol.closeangle",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.categoryname";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.category.openparen";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "(",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.category.closeparen";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                ")",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.categoryclause";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.category.openparen",
                "xcode.lang.eero.categoryname",
                "xcode.lang.eero.category.closeparen"
            );
        };
    },

/****************************************************************************/
// MARK: Interfaces/Implementations
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.protocol.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            Rules = (
                "xcode.lang.eero.protocol.declarator",
                "xcode.lang.eero.protocol.protocollist*",
                ";?",
            );
            Type = "xcode.syntax.declaration.objc.protocol";
        };
    },
    {
        Identifier = "xcode.lang.eero.protocol.protocollist";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                ",",
                "xcode.lang.eero.protocolname",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.protocol";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            Start = "xcode.lang.eero.protocol.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.eero.method.declaration",
                "xcode.lang.eero.method.declaration.unnamed",
                "xcode.lang.eero.classmethod.declaration",
                "xcode.lang.eero.property.declaration",
            );
            Type = "xcode.syntax.declaration.objc.protocol";
        };
    },
    {
        Identifier = "xcode.lang.eero.interface";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            Start = "xcode.lang.eero.interface.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.eero.c.block",
                "xcode.lang.eero.method.declaration",
                "xcode.lang.eero.method.declaration.unnamed",
                "xcode.lang.eero.classmethod.declaration",
                "xcode.lang.eero.property.declaration",
            );
            Type = "xcode.syntax.declaration.objc.interface";
        };
    },
    {
        Identifier = "xcode.lang.eero.implementation";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.toplevel";
            Start = "xcode.lang.eero.implementation.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.eero.method.definition",
                "xcode.lang.eero.method.definition.unnamed",
                "xcode.lang.eero.classmethod.definition",
                "xcode.lang.eero.property.implementation.synthesize",
                "xcode.lang.eero.property.implementation.dynamic",
            );
            Type = "xcode.syntax.definition.objc.implementation";
        };
    },

/****************************************************************************/
// MARK: Methods
/****************************************************************************/
    {
        Identifier = "xcode.lang.eero.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.method.declarator.full",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.eero.comma.wrap";
        Syntax = {
            Start = "xcode.lang.eero.comma_eol";
            End = "\n";
            Recursive = NO;
        };
    },
    {
        Identifier = "xcode.lang.eero.method.declarator.full";
        Syntax = {
            Start = "xcode.lang.eero.identifier";
            Until = "\n";            
            StartAtBOL = YES;
            Tokenizer = "xcode.lang.eero.lexer.method.declarator";
            IncludeRules = (
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
                "xcode.lang.eero.comma.wrap",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.method.declarator.unnamed";
        Syntax = {
            Start = ":";
            Until = "\n";            
            StartAtBOL = YES;            
            Tokenizer = "xcode.lang.eero.lexer.method.declarator";
            IncludeRules = (
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
                "xcode.lang.eero.comma.wrap",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.classmethod.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.classmethod.declarator.full",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.eero.classmethod.declarator.full";
        Syntax = {
            Start = "class";
            Until = "\n";
            StartAtBOL = YES;
            Tokenizer = "xcode.lang.eero.lexer.method.declarator";
            IncludeRules = (
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
                "xcode.lang.eero.comma.wrap",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    {
        Identifier = "xcode.lang.eero.method.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.method.declarator",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.eero.method.declaration.unnamed";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.method.declarator.unnamed",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.eero.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.indentation";
            Rules = (
                "xcode.lang.eero.method.declarator",
                "xcode.lang.eero.indentation.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    }, 
    {
        Identifier = "xcode.lang.eero.method.definition.unnamed";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.indentation";
            Rules = (
                "xcode.lang.eero.method.declarator.unnamed",
                "xcode.lang.eero.indentation.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.eero.classmethod.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.classmethod.declarator",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.eero.classmethod.definition";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.indentation";
            Rules = (
                "xcode.lang.eero.classmethod.declarator",
                "xcode.lang.eero.indentation.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },


/****************************************************************************/
// MARK: Functions
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.function.declarator",
                "xcode.lang.eero.c.block",
            );
            Type = "xcode.syntax.definition.c.function";
        };
    },
    {
        Identifier = "xcode.lang.eero.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.function.declarator",
                "xcode.lang.eero.identifier?",
                ";?"
            );
            Type = "xcode.syntax.declaration.c.function";
        };
    },
    {
        Identifier = "xcode.lang.eero.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.function.name",
                "xcode.lang.eero.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },


/****************************************************************************/
// MARK: Properties
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.property.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.property.end",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.name.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.property.name",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.comma";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = ( ",", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.lexer";
            Start = "xcode.lang.eero.property.declarator";
            End = "xcode.lang.eero.property.end";
            AltEnd = "\n";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "@property",
                "xcode.lang.eero.property.options?",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.end";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.name.lexer";
            Rules = (
                "xcode.lang.eero.property.name",
                "xcode.lang.eero.property.morenames?",
                ";?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.name";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.property.name.actual",
                "xcode.lang.eero.property.name.ivarextra?",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.morenames";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.property.namelist+",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.name.lexer";
            Rules = (
                "xcode.lang.eero.property.comma",
                "xcode.lang.eero.property.name",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.name.actual";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.name.ivarextra";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "=";
            End = "xcode.lang.eero.identifier";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.options";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.options.lexer";
            Start = "(";
            End = ")";
            AltEnd = ";";
            Recursive = YES;
        };
    },
    {
        Identifier = "xcode.lang.eero.property.options.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.objc",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.property.options.identifier",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.property.options.identifier";
        Syntax = {
            Words = (
                "setter",
                "getter",
                "readonly",
                "readwrite",
                "assign",
                "retain",
                "copy",
                "nonatomic",
             );
            Type = "xcode.syntax.keyword";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.implementation.synthesize";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.lexer";
            Start = "@synthesize";
            End = "xcode.lang.eero.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.eero.property.implementation.dynamic";
        Syntax = {
            Tokenizer = "xcode.lang.eero.property.lexer";
            Start = "@dynamic";
            End = "xcode.lang.eero.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    
/****************************************************************************/
// MARK: Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.typedef.end",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.eero.attribute",
                "xcode.lang.eero.typedef.name",
                "xcode.lang.eero.identifier",
                "xcode.lang.number",
            );
        };
    },
    {
        Identifier = "xcode.lang.eero.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.eero.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.eero.typedef.function",
                "xcode.lang.eero.c.block",
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.parenexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.eero.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "xcode.lang.eero.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.eero.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.typedef.name";
            Rules = (
                "xcode.lang.eero.typedef.name",
                "\n",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.eero.typedef.function";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.typedef.name";
            Rules = (
                "(",
                "*",
                "xcode.lang.eero.typedef.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },


/****************************************************************************/
// MARK: Blocks
/****************************************************************************/

    {
        Identifier = "xcode.lang.eero.c.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.eero.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Rules = (
                "enum",
                "xcode.lang.eero.identifier?",
                "xcode.lang.eero.c.block",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.eero.parenexpr";
        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.c.block",
                
            );
        };
    },

    {
        Identifier = "xcode.lang.eero.bracketexpr";
        BasedOn = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.eero.parenexpr",
                "xcode.lang.eero.c.block",
            );
        };
    },

    // declare "fake" tokens for XCPythonScanner to return 
    {
        Identifier = "xcode.lang.python.indent";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.python.dedent";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.eero.operator.wrap";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "xcode.lang.eero.operator_eol";
            End = "\n";
            Recursive = NO;
        };
    },
    {
        Identifier = "xcode.lang.eero.operator.iso646.wrap";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer";
            Start = "xcode.lang.eero.operator.iso646.wrap_eol";
            End = "\n";
            Recursive = NO;
        };
    },

    {
        Identifier = "xcode.lang.eero.indentation.block";
        Syntax = {
            Tokenizer = "xcode.lang.eero.lexer.indentation";
            Start = "xcode.lang.python.indent";
            End = "xcode.lang.python.dedent";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.eero.bracketexpr",
                "xcode.lang.eero.parenexpr",
                "xcode.lang.eero.c.block",
                "xcode.lang.eero.comma.wrap",
                "xcode.lang.eero.operator.wrap",
                "xcode.lang.eero.operator.iso646.wrap",
            );
            Type = "xcode.syntax.plain";
        };
    }

)

